snippet main
	if __name__ == "__main__":
		${0:pass}
snippet mainarg
	if __name__ == "__main__":
		import argparse
		parser = argparse.ArgumentParser("${1}")
		parser.add_argument("${2}", ${3})
		args = parser.parse_args()
		${0}

snippet arg
	parser.add_argument("${1}", ${2})
	${0}

snippet imp
	import ${0:module}
snippet from
	from ${1:package} import ${0:module}

snippet with
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}
snippet withf
	with open(${1:file}, ${2:args}) as ${3:var}:
		${0:${VISUAL}}

# New Class
snippet class
	class ${1:class_name}:
		"""${2:description}"""
		def __init__(self, ${3:args}):
			${0:pass}

# New Function
snippet def
	def ${1:fname}(${2:args}):
		${0:pass}
# New Method
snippet defi
	def __init__(self, ${1:args}):
		${0:pass}
snippet defm
	def ${1:mname}(self, ${2:args}):
		${0:pass}

# New Property
snippet property
	@property
	def ${1:foo}(self):
		return self._$1

	@$1.setter
	def $1(self, value: $2):
		self._$1 = value

# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}


# logging
# glog = get log
snippet glog
	import logging
	LOGGER = logging.getLogger(${0:__name__})
snippet le
	LOGGER.error(${0:msg})
# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
	LOGGER.debug(${0:msg})
snippet lw
	LOGGER.warning(${0:msg})
snippet lc
	LOGGER.critical(${0:msg})
snippet li
	LOGGER.info(${0:msg})

# comprehensions
snippet lcp list comprehension
	[${1} for ${2} in ${3:${VISUAL}}]${0}
snippet dcp dict comprehension
	{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}
snippet scp set comprehension
	{${1} for ${2} in ${3:${VISUAL}}}${0}


# Printing
snippet pr
	print($0)
snippet prs
	print("$0")
snippet prf
	print(f"$0")
